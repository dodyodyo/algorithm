# 빈 리스트 선언 방법
a = list()
print(a)

a = []
print(a)

# 0으로 초기화한 크기가 N인 1차원 리스트 생성
N = int(input())
a = [0] * N

# 0으로 초기화한 행(row) 개수 N, 열(column)개수 M인 2차원 리스트 생성 (리스트 컴프리헨션)
N, M = map(int, input().split())
A = [[0 for _ in range(M)] for _ in range(N)]
A = [[0] * M for _ in range(N)]
A = [[0] * M] * N  # 하나를 바꾸었는데 여러개가 동시에 바뀌는 문제 야기
print(A)

# 리스트 인덱싱
# print(list[a:b]) # 인덱스 a부터 b-1 까지

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[1:4])  # [2, 3, 4]  인덱스 1부터 3까지
print(a[1:-1])  # [2, 3, 4, 5, 6, 7, 8]   # 인덱스 1부터 마지막 인덱스 제외하고 끝까지
print(a[1:])  # [2, 3, 4, 5, 6, 7, 8, 9]
print(a[:4])  # [1, 2, 3, 4]
print(a[:4] + a[4:])  # [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[::-1])  # [9, 8, 7, 6, 5, 4, 3, 2, 1]
print(a[::-2])  # [9, 7, 5, 3, 1]

# mutable한 객체 list
a = [1, 2, 3, 4]
b = a  # a와 b는 같은 주소값을 참조하게 된다
print(a, b)  # [1, 2, 3, 4] [1, 2, 3, 4]
b[1] = 0  # 배열 b의 두번째 값을 0으로 바꿔준다.
print(a, b)  # [1, 0, 3, 4] [1, 0, 3, 4]


# 따라서 원본 배열의 보존을 위해 깊은 복사가 필요함
# copy모듈의 deepcopy() 이용
import copy

a = [1, 2, 3, 4]
b = copy.deepcopy(a)
b[1] = 0
print(a, b)  # [1, 2, 3, 4] [1, 0, 3, 4]


# 리스트 컴프리헨션
# 리스트를 초기화하는 방법 중하나로 대괄호[]안에 조건문과 반복문을 넣는 방식으로 리스트를 초기화할 수 있다.
a = [i for i in range(20) if i % 2 == 1]
print(a)  # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

b = [i * i for i in range(1, 10)]
print(b)  # [1, 4, 9, 16, 25, 36, 49, 64, 81]


"""
리스트 과련 메서드
apppend(): O(1)
a.append(): 리스트에 원소를 하나 삽입 때 사용한다.
#1.목록에 요소추가
a = [1, 2, 3]
a.append(4)
print(a)
# >>>[1, 2, 3, 4]

#2.목록에목록추가
a=[1, 2, 3]
b=[4, 5]
a.append(b)
print(a)
# >>> [1, 2, 3, [4, 5]]
---------------------------------------------------------------------

a.extend(): 리스트의 모든 요소를 다른 리스트에 추가
# 리스트에 모든요소를 다른 리스트에 추가
a = [1, 2, 3]
a1 = [4, 5, 6]
a.extend(a1)
print(a)
# >>> [1, 2, 3, 4, 5, 6]

# set
a = [1, 2, 3]
a1 = {4: 4}
a.extend(a1)
print(a)
# >>> [1, 2, 3, 4]

# tuple
a = [1, 2, 3]
a1 = (4, 5)
a.extend(a1)
print(a)
# >>> [1, 2, 3, 4, 5]

# set
a = [1, 2, 3]
a1 = {4}
a.extend(a1)
print(a)
# >>> [1, 2, 3, 4]
---------------------------------------------------------------

sort(): O(NlogN)
a.sort(): 오름차순으로 정렬한다.
a.sort(reverse = True): 내림차순으로 정렬한다.
---------------------------------------------------------------------
reverse: O(N)
a.reverse(): 리스트의 원소의 순서를 모두 뒤집어 놓는다.
a = [1,2,3]
a.reverse()
print(a)
# >>> [3, 2, 1]

a = [1,2,3]
a.reverse()
a.reverse()
print(a)
# >>> [1, 2, 3]
------------------------------------------------------
insert(): O(N)
a.insert(index, value): 인덱스에 값을 삽입

# 0번째 위치 '4' 삽입
a = [1,2,3]
a.insert(0,'4')
print(a)
# >>> ['4', 1, 2, 3]

# 1번째위치 (4,5) 삽입
a = [1,2,3]
a.insert(1,(4,5))
print(a)# >>> [1, (4, 5), 2, 3]

--------------------------------------------------------------------
index()
a.index(value): 첫 번째 일치 항목의 인덱스를 반환
#. 첫 번째 일치 항목의 인덱스를 반환
a = [1,2,3,1]
print(a.index(1))# >>> 0
--------------------------------------------------------------------

count(): O(N)
a.count(value): - 인수로 전달 된 항목 수의 개수를 반환합니다.
#. 인수로 전달된 항목수의 개수를 반환합니다.
a = [1,2,3,1]
print(a.count(1))# >>> 2
----------------------------------------------------------------------
pop(): O(N)
a.pop(제거할 위치 인덱스): 특정한 인덱스의 원소를 제거한다.
인덱스를 삽입하지 않으면 해당 끝에서 부터 차례차례 꺼낸다.

#. 주어진 인덱스에서 요소를 제거하고 반환
a = [1,2,3]
a.pop(1)
print(a)
# >>> [1,3]

#. index를 넣지 않을시 맨 끝에서 부터 꺼낸다.
a = [1,2,3]
a.pop()
print(a)
# >>> [1, 2]

a.pop()
print(a)
# >>> [1]

a.pop()
print(a)
# >>> []
---------------------------------------------------------------------
remove(): O(N)
a.remove(특정 값): 특정한 값을 갖는 원소를 제거하는데, 값을 가진 원소가 여러개면  첫번째 일치하는 항목만 지운다.

# 리스트 안의 1요소 제거
a = [1,2,3]
a.remove(1)
print(a)
# >>> [2, 3]

# 리스트 안의 1요소 제거(첫번째 일치된 요소만 제거)
a = [1,2,3,1]
a.remove(1)
print(a)
# >>> [2, 3, 1]

# 존재하지 않는 요소는 error
a = [1,2,3,1]
a.remove(4)
print(a)
# >>> error
---------------------------------------------------------------------
del 키워드
a = [1, 2, 3, 4, 5, 6, 7]
del a[2:]
print(a) # [1, 2]

-------------------------------------------------------------------
clear()
a.clear(): 목록에서 모든 항목을 제거한다.
#. 목록에서 모든 항목을 제거합니다.
a = [1,2,3]
a.clear()
print(a)
# >>> []
----------------------------------------------------------------------

"""

# 리스트에서 특정한 값을 가지는 모든 원소를 삭제할 때
# 집합 자료형과 리스트 컴프리헨션을 이용
a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5}

# remove_set에 포함되지 않은 값만을 저장
# # a리스트에서 i를 뽑을 건데 i는 remove_set에 없는 i이다
result = [i for i in a if i not in remove_set]
print(result)

# del 예약어
int_list = [1, 2, 3, 4, 5, 6, 7]
str_list = ["가", "나", "다", "라", "마"]

del int_list[0]  # 한개의 요소를 삭제
print(int_list)  # [2, 3, 4, 5, 6, 7]

del str_list[3:]  # 여러개의 요소를 삭제
print(str_list)  # ['가', '나', '다']


# 리스트 컴프리핸션
n = int(input())
board = []
for i in range(n):
    board.append(list(map(int, input().split())))

board = [list(map(int, input().split())) for _ in range(n)]


# 대입과 append의 차이
game = [[[] for _ in range(3)] for _ in range(3)]
game[0][0].append(1)
game[0][1] = 2
print(game)
[[[1], 2, []], [[], [], []], [[], [], []]]
