# mutable, immutable과 *, for _ in range()의 차이
# a = [0] * 3  # 객체 0을 3번 반복하여 동일한 immutable 객체 3개인 [0, 0, 0]를 만듬

# a = [0 for _ in range(3)] # 객체 0을 3번 추가하여 동일한 immutable 객체 3개인 [0, 0, 0]를 만듬 (why? 파이썬에서는 immutable한 객체를 추가할 때 매번 새로 생성하는 것이 아닌 이미 존재하는 객체를 재사용함)

# a = [[0]] * 3 # 객체 [0]을 3번 반복하여 동일한 mutable 객체 3개인 [[0], [0], [0]]를 만듬

# a = [[0] for _ in range(3)] [0]을 3번 추가하여 서로 다른 mutable 객체 3개인 [[0], [0], [0]]를 만듬 (why? 파이썬에서는 mutable한 객체를 추가할 때 매번 새로 생성함)

# -------------------------------------------------------------------
# 틀리기 쉬운 경우
# a = [] * 5  # 빈 리스트 '[]'에 * 5 를 적용 빈 리스트를 아무리 곱해도 빈리스트 이므로 a = []가 됨

# a = [[] * 5]  # 리스트 '[]'에 * 5 를 적용하여 []를 만든 후 []로 감쌈
# print(a)  # a=[[]]

# a = [for _ in range(5)]  # 문법오류, 리스트 컴프리헨션은 [] 안에 표현식과 for 구문이 있어야 한다

# -----------------------------------------------------------------
# 예시

# a = [[0] * 5] * 3  # 객체 0 을 5번 반복하여 동일한 immutable객체 5 개인 [0, 0, 0, 0, 0]을 만든 후 mutable한 객체 [0, 0, 0, 0, 0]을 3번 반복 -> a[0][0] a[1][0] a[2][0]의 주소값 모두 같음

# a = [[0] * 5 for _ in range(3)]  # 객체 0을 5번 반복하여 동일한 immutable한 객체 5개인 [0, 0, 0, 0, 0]을 만든 후 mutable한 객체를 3번 추가

# a = [[0 for _ in range(5)] for _ in range(3)] # 객체 0을 5번 추가하여 동일한 immutable한 객체 5개인 [0, 0, 0, 0, 0]을 만든 후 mutable한 객체를 3번 추가

